// ––––––––– $CONSTANTS


$vip: uq('!important');
/* ––––––––––––––––––––
very important proope -
rties.    
–––––––––––––––––––– */


$_:                  _;
/* ––––––––––––––––––––
$_ allows me to check -
if x is type xyz. The -
$w ( width ) fx for e -
xample checks if the  -
f ($_) unit type isn' -
pixel else defaults t -
$_ * $px.
–––––––––––––––––––– */

$t:               true;
$f:              false;

$pc:              001%;
$px:              01px; 
$fr:              01fr;
$rm:              1rem;

$vw:             100vw;
$vh:             100vh;


// ––––––––––––––––––––

$b:               01.6; 
$base:        $b * $px;
$s:               62.5; 
$scale:       $s * $px;

// ––––––––––––––––––––

$_1:     calc($b * $s);
$_2:     calc($_1 / 2);
$_3:     calc($_1 / 3);
$_4:     calc($_1 / 4);

$_xs:   calc($b + 0.4);
$_sm:   calc($_xs * 2);
$_md:   calc($_sm * 2); 
$_lg:   calc($_md * 2);

$_1x:   calc($_lg * 2);
$_2x:   calc($_1x * 2);
$_3x:   calc($_2x * 2);
$_4x:   calc($_3x * 2);
$_5x:   calc($_4x * 2);
$_6x:   calc($_5x * 2);
$_7x:   calc($_6x * 2);
$_8x:   calc($_7x * 2);
$_9x:   calc($_8x * 2);

$clr:      transparent;

$m_1:      245,244,243;
$m_2:      212,211,210;
$m_3:      179,178,178;
$m_4:      148,147,146;
$m_5:      117,117,116;
$m_6:      088,088,088;
$m_7:      061,061,061;
$m_8:      024,023,023;
$m_9:      008,008,008;

$wht:             $m_1;
$gry:             $m_5;
$blk:             $m_9;

$am:              $wht;
$pm:              $blk;

$r_1:      255,205,210;
$r_2:      239,154,154;
$r_3:      248,187,208;
$r_4:      242,156,173;
$r_5:      236,125,139;
$r_6:      231,094,104;
$r_7:      213,000,000; 
$r_8:      120,015,011;
$r_9:      074,022,016;
$red:             $r_5;

$o_1:      255,224,178;
$o_2:      255,204,128;
$o_3:      255,183,077;
$o_4:      255,167,038;
$o_5:      255,152,000;
$o_6:      251,140,000;
$o_7:      245,124,000;
$o_8:      239,108,000;
$o_9:      230,081,000;
$org:             $o_5;

$y_1:      255,252,168;
$y_2:      255,248,153;
$y_3:      255,241,112;
$y_4:      255,232,071;
$y_5:      255,221,031;
$y_6:      255,215,010;
$y_7:      245,200,000;
$y_8:      224,182,000;
$y_9:      204,163,000;
$ylw:             $y_5;

$g_1:      235,255,168;
$g_2:      219,255,153;
$g_3:      197,247,121;
$g_4:      170,236,090;
$g_5:      140,223,063;
$g_6:      107,206,039;
$g_7:      079,172,032;
$g_8:      053,138,025;
$g_9:      032,104,018;
$grn:             $g_5;

$b_1:      187,222,251;
$b_2:      144,202,249;
$b_3:      100,181,246;
$b_4:      066,165,245;
$b_5:      033,150,243;
$b_6:      030,136,229;
$b_7:      025,118,210;
$b_8:      021,101,192;
$b_9:      013,071,161;
$blu:             $b_5;

$i_1:      178,235,242;
$i_2:      128,222,234;
$i_3:      077,208,225;
$i_4:      038,198,218;
$i_5:      000,188,212;
$i_6:      000,172,193;
$i_7:      000,151,167;
$i_8:      000,131,143;
$i_9:      000,096,100;
$ind:             $i_5;

$v_1:      255,190,231;
$v_2:      206,147,216;
$v_3:      186,104,200;
$v_4:      171,071,188;
$v_5:      156,039,176;
$v_6:      142,036,170;
$v_7:      123,031,161;
$v_8:      106,027,154;
$v_9:      074,020,140;
$vlt:             $v_5;

$h_1:      253,245,234;
$h_2:      241,208,187;
$h_3:      225,172,142;
$h_4:      204,139,100;
$h_5:      179,107,061;
$h_6:      141,082,047;
$h_7:      105,059,036;
$h_8:      069,038,025;
$h_9:      037,018,012;
$hmn:             $h_5;

$a:               auto;
$c:             center;



$sb:     space-between;
$sa:      space-around;
$fs:        flex-start;
$fe:          flex-end;
$_c:                $c;


$row:              row;
$col:           column;




// –––––––––– FUNCTIONS

@function        _($_){
  @return           $_;
}

@function       uq($_){  
  @return  unquote($_);
}
@function      rgb($_){ 
  @return uq(
           'rgb(#{$_})'
  );
}
@function       bg($_){
  @return uq(
           'rgb(#{$_})'
  );
}
@function       fg($_){
  @return uq(
           'rgb(#{$_})'
  );
}

@function  s($_: none){
  @return           $_;
}
@function  c($_: $blk){
  @return           $_;
}

@function       ff($_){ 
  @if        $_ == $sb{
           @return $sb;
  }@else if  $_ == $sa{
           @return $sa;
  }@else if  $_ == $fs{
           @return $fs;
  }@else if  $_ == $fe{
           @return $fe;
  }@else if  $_ == $_c{
           @return $_c;
  }@else              {
            @return $_;
  }
}

@function      rct($_){
  @return calc($_ / 3);
}

// –––––––––––– @MIXINS

@mixin     w($x,$y,$z){
  min-width:        $x;
  max-width:        $x;
  width:            $z;
}

@mixin     h($x,$y,$z){
  min-height:       $x;
  max-height:       $y;
  height:           $z;
}

@mixin    wh($x,$y,$z){
  min-width:        $x;
  min-height:       $x;
  max-width:        $y;
  max-height:       $y;
  width:            $z;
  height:           $z;
}

@mixin         wfh($_){
  min-height:     100%;
  max-height:     100%;
  min-width:        $_;
  max-width:        $_;
  height:         100%;
  width:            $_;
}

@mixin         hfw($_){
  min-height:       $_;
  max-height:       $_;
  min-width:      100%;
  max-width:      100%;
  height:           $_;
  width:          100%;
}

@mixin         sqr($_){
  min-height:       $_;
  max-height:       $_;
  min-width:        $_;
  max-width:        $_;
  height:           $_;
  width:            $_;
}

@mixin         rct($_){
  min-height:       $_;
  max-height:       $_;
  height:           $_;
  min-width:   rct($_);
  max-width:   rct($_);
  width:       rct($_);
}

@mixin         
               cir($_){
  border-radius:   $_1;
  @include     sqr($_);
}


@mixin                       -vendor(){
      -webkit-appearance:         none;
      -moz-appearance:            none;
      -ms-overflow-style:         none;
      scrollbar-width:            none;
      ::-webkit-scrollbar {
      display:                    none;
      }
}

@mixin                          base(){
    min-height:                     $h;
    max-height:                    $vh;
    min-width:                      $w;
    max-width:                     $vw;
    height:                        $_1; 
    margin:                       auto;
}

@mixin           iosTextSizeAdjust($x){
  -webkit-text-size-adjust:         $x;
  -ms-text-size-adjust:             $x;
}
  
@mixin                 typography($ff){
  font-family:                     $ff;
  font-size:                     $font;
}

@mixin                  aura($bg, $fg){
  @if                 $dark-mode == $t{

    $bg:                           $pm; 
    $fg:                           $am;

    background-color:          bg($bg);
    color:                     fg($fg);

  }@else if          $dark-mode == $f{

    $bg:                           $am; 
    $fg:                           $pm;

    background-color:          bg($bg);
    color:                     fg($fg);

  }@else                              {
    background-color:          bg($bg);
    color:                     fg($fg);
  }
}



@mixin   bg($_: _, $bg, $fg, $url: ''){

  @if $_ == _ {
    $_:                      100% 100%;
  }@else if $_ == x {
    $_:                      auto 100%;
  }@else if $_ == y {
    $_:                      100% auto;
  }@else {
    $_:                      auto auto;
  }

  background:                url($url);
  background-repeat:         no-repeat;
  background-size:                  $_;
  background-position:   center center;
  @include               aura($bg,$fg);

}
/* ––––––––––––––––––––––––––––––––––––
$_:    background-size: $x $y;        - 
$bg:   background-color:  $bg;        -
$fg:   color:             $fg;        -
$url:  background:  url($url);        -
–––––––––––––––––––––––––––––––––––– */

@mixin trbl(
  $_: $_,
  $t: 0,
  $r: 0,
  $b: 0,
  $l: 0,
  $p: absolute){

  @if                 $p == absolute or
                      $p == relative or
                      $p == sticky   or
                      $p == fixed     {

    position:                       $p;

  }@else                              {
    position:                   static;

  }

  @if $_ == tl or $_ == tc or $_ == tr{
    top:                            $t;
  }

  @if $_ == cl or $_ == cc or $_ == cr{
    top:                           50%;
    transform:        translateY(-50%);
  }

  @if $_ == bl or $_ == bc or $_ == br{
    top:                          100%;
    transform:       translateY(-100%);
  }

  @if $_ == tl or $_ == cl or $_ == bl{
    left:                           $l;
  }
  
  @if          $p == absolute or fixed{

      @if                   $_ == tr or 
                            $_ == cr or
                            $_ == br  {
          right:                    $r;
      }

      @if                  $_ == otl or
                           $_ == otr  {
          top:                     20%;

      }@else if            $_ == obl or
                           $_ == obr  {
          bottom:                   20%;
      }

      @if                  $_ == otl or
                           $_ == obl  {
          left:                    20%;

      }@else if            $_ == otr or
                           $_ == obr  {
          right:                   20%;
      }

  }@else if             $p == relative{

      @if                   $_ == tr or
                            $_ == cr or
                            $_ == br  {
              left:               100%;
      }

      @if                   $_ == tr  {
      
          transform: translateX(-100%);

      }@else if               $_ == cr{

          transform: translate(
                            -100%, -50%
                      );
      }@else if               $_ == br{
          transform:   translate(
                           -100%, -100%
                        );
      }

  }@else if               $p == sticky{

      @if                   $_ == tr or
                            $_ == cr or
                            $_ == br  {
              left:               100%;
      }
      @if                   $_ == bl or
                            $_ == bc or
                            $_ == br  {
              bottom:               $b;
          }

  }@else if           $p != absolute or
                      $p != relative or
                      $p != sticky   or
                      $p != fixed     {

  }

  @if                         $_ == tc{
      left:                        50%;
      transform:      translate(
                               -50%, 0%
                      );
  }@else if                   $_ == cc{
      left:                        50%;
      transform:      translate(
                             -50%, -50%
                      );
  }@else if                   $_ == bc{
      left:                        50%;
      transform:      translate(
                            -50%, -100%
                      );
  }
  
}

/* ––––––––––––––––––––––––––––––––––––
$_: tl,tc,tr,  cl,cc,cr,  bl,bc,br    - 
$p: absolute, fixed sticky relative   -
–––––––––––––––––––––––––––––––––––– */

.tl{@include trbl(tl)}
.tc{@include trbl(tc)}
.tr{@include trbl(tr)}

.cl{@include trbl(cl)}
.cc{@include trbl(cc)}
.cr{@include trbl(cr)}

.bl{@include trbl(bl)}
.bc{@include trbl(bc)}
.br{@include trbl(br)}


@mixin     m($t, $r, $b, $l, $_: auto){
  @if $_ != auto{
    $t: $_;
    $r: $_;
    $b: $_;
    $l: $_;
    margin:    m($t) m($r) m($b) m($l);
  }@else {
    margin:    m($t) m($r) m($b) m($l);
  }
}

@mixin     p($t, $r, $b, $l, $_: auto){
  @if $_ != auto{
    $t: $_;
    $r: $_;
    $b: $_;
    $l: $_;
    padding:   p($t) p($r) p($b) p($l);
  }@else {
    padding:   p($t) p($r) p($b) p($l);
  }
}

// border

@mixin                           j($_){
  justify-content:              ff($_);
}
@mixin                          as($_){
  align-self:                   ff($_);
}
@mixin                          ac($_){
  align-content:                ff($_);
}
@mixin                          ai($_){
  align-items:                  ff($_);
} 

@mixin             f($d: flex, $f, $j){
  display:                          $d;
  flex-flow:                        $f;
  @include                       j($j);
}

// grid
// animation
// transition
// transform
